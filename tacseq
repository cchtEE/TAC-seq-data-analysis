#!/bin/bash

# set default values to arguments
mismatches=5  # default mismatches
umi=2  # default UMI threshold

# tacseq command usage function
tacseq_usage() {
  echo "usage: $0 [options] <command>"
  echo ""
  echo "options:"
  echo "	-h	display this help and exit"
  echo ""
  echo "commands:"
  echo "	prep	prepare samples (FASTQ files) for counting"
  echo "	count	count reads and molecules per sample and target"
  echo ""
}

# prep sub-command usage function
prep_usage() {
  echo "usage: $0 $subcommand [options]"
  echo ""
  echo "mandatory:"
  echo "	-i	input files: compressed/uncompressed FASTQ files"
  echo "	-t	target file: target file format is based on FASTX Barcode Splitter barcode file format (http://hannonlab.cshl.edu/fastx_toolkit/commandline.html#fastx_barcode_splitter_usage)"
  echo "	-o	output directory"
  echo ""
  echo "optional:"
  echo "	-h	display this help and exit"
  echo "	-m	mismatches: number of allowed mismatches per target sequence (default: 5)"
  echo ""
}

# count sub-command usage function
count_usage() {
  echo "usage: $0 $subcommand [options]"
  echo ""
  echo "mandatory:"
  echo "	-i	input directory: 'tacseq prep' output directory"
  echo ""
  echo "optional:"
  echo "	-h	display this help and exit"
  echo "	-u	UMI threshold (default: 2)"
  echo ""
}

# parse options to sub-commands
subcommand=$1
OPTIND=2
case $subcommand in
  # parse options to 'prep' sub-command
  prep )
    while getopts ":i:t:o:m:" opt; do
      case ${opt} in
        i )
          input=$OPTARG
          ;;
        t )
          target=$OPTARG
          ;;
        o )
          output=$OPTARG
          ;;
        m )  # optional
          mismatches=$OPTARG
          ;;
		* )
		  prep_usage 1>&2
		  exit 1
		  ;;
      esac
    done
	shift $((OPTIND-1))
	
	# check for mandatory options
	if [ ! "$input" ] || [ ! "$target" ] || [ ! "$output" ]; then
	  prep_usage 1>&2
	  exit 1
	fi
	
	# run 'prep' sub-command
	source prep.sh "$input" $target $output $mismatches
    ;;
  # parse options to 'count' sub-command
  count )
    while getopts ":i:u:" opt; do
      case ${opt} in
        i )
          input=$OPTARG
          ;;
        u )  # optional
          umi=$OPTARG
          ;;
		* )
		  count_usage 1>&2
		  exit 1
		  ;;
      esac
    done
	shift $((OPTIND-1))
	
	# check for mandatory options
	if [ ! "$input" ]; then
	  count_usage 1>&2
	  exit 1
	fi
	
	# run 'count' sub-command
	source count.sh "$input" $umi
    ;;
  * )
    tacseq_usage 1>&2
    exit 1
    ;;
esac
